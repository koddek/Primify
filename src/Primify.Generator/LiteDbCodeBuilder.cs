using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Primify.Generator;

internal static class LiteDbCodeBuilder
{
    // Generates the central registration class ONLY for BSON mapping
    public static string GenerateLiteDbRegistration(List<WrapperTypeInfo> types)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using LiteDB;");
        sb.AppendLine("using System.Runtime.CompilerServices;");
        sb.AppendLine();
        // Add using directives for all namespaces containing the types
        foreach (var ns in types.Select(t => t.Namespace).Where(n => !string.IsNullOrEmpty(n)).Distinct())
        {
            sb.AppendLine($"using {ns};");
        }

        sb.AppendLine();
        sb.AppendLine("namespace Primify.Generated");
        sb.AppendLine("{");
        sb.AppendLine(
            "    /// <summary>Provides BSON registration for types generated by ValueWrapperGenerator.</summary>");
        sb.AppendLine("    internal static class PrimifyLiteDbRegistration");
        sb.AppendLine("    {");
        sb.AppendLine("        private static bool _initialized = false;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>Initializes BSON mappers using BsonMapper.Global.</summary>");
        sb.AppendLine("        [ModuleInitializer]");
        sb.AppendLine("        internal static void InitializeGlobalLiteDbBsonMappers()");
        sb.AppendLine("        {");
        sb.AppendLine("            RegisterLiteDbBsonMappers(BsonMapper.Global);");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>Registers BSON mappers with a specific BsonMapper instance.</summary>");
        sb.AppendLine("        public static void RegisterLiteDbBsonMappers(BsonMapper mapper)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (mapper == BsonMapper.Global && _initialized) return;");
        sb.AppendLine("            if (mapper == null) throw new ArgumentNullException(nameof(mapper));");
        sb.AppendLine();
        foreach (var info in types)
        {
            string deserializeExpression;
            string serializeExpression;

            // Special handling for different primitive types
            if (info.PrimitiveTypeSymbol.ToDisplayString() == "System.Guid")
            {
                // Special handling for Guid
                serializeExpression = $"new BsonValue(({info.PrimitiveTypeName})value)";
                deserializeExpression = $"{info.FullTypeName}.From(bson.AsGuid)";
            }
            else if (info.PrimitiveTypeSymbol.SpecialType == SpecialType.System_DateTime)
            {
                serializeExpression = $"new BsonValue(({info.PrimitiveTypeName})value)";
                deserializeExpression = $"{info.FullTypeName}.From(bson.AsDateTime)";
            }
            else
            {
                // Standard handling for other types
                var bsonAccessor = GetBsonAccessor(info.PrimitiveTypeSymbol);
                serializeExpression = $"new BsonValue(({info.PrimitiveTypeName})value)";
                deserializeExpression = $"{info.FullTypeName}.From(bson.{bsonAccessor})";

                if (bsonAccessor == "RawValue")
                {
                    sb.AppendLine(
                        $"            // Warning: BSON mapping for {info.PrimitiveTypeName} used by {info.FullTypeName} using RawValue.");
                }
            }

            sb.AppendLine($"            mapper.RegisterType<{info.FullTypeName}>(");
            sb.AppendLine($"                serialize: (value) => {serializeExpression},");
            sb.AppendLine($"                deserialize: (bson) => {deserializeExpression});");
        }

        sb.AppendLine();
        sb.AppendLine("            if (mapper == BsonMapper.Global) _initialized = true;");
        sb.AppendLine("        }");
        sb.AppendLine("    }"); // Close class
        sb.AppendLine("}"); // Close namespace

        return sb.ToString();
    }

    // Helper to get the LiteDB BsonValue accessor
    public static string GetBsonAccessor(ITypeSymbol primitiveTypeSymbol)
    {
        switch (primitiveTypeSymbol.SpecialType)
        {
            case SpecialType.System_Boolean: return "AsBoolean";
            case SpecialType.System_Char: return "AsString";
            case SpecialType.System_SByte: return "AsInt32";
            case SpecialType.System_Byte: return "AsInt32";
            case SpecialType.System_Int16: return "AsInt32";
            case SpecialType.System_UInt16: return "AsInt32";
            case SpecialType.System_Int32: return "AsInt32";
            case SpecialType.System_UInt32: return "AsInt32";
            case SpecialType.System_Int64: return "AsInt64";
            case SpecialType.System_UInt64: return "AsDecimal";
            case SpecialType.System_Single: return "AsDecimal";
            case SpecialType.System_Double: return "AsDecimal";
            case SpecialType.System_Decimal: return "AsDecimal";
            case SpecialType.System_String: return "AsString";
            case SpecialType.System_DateTime: return "AsDateTime";
            default:
                if (primitiveTypeSymbol.ToDisplayString() == "System.Guid")
                    return "AsGuid";
                if (primitiveTypeSymbol.ToDisplayString() == "System.DateTimeOffset")
                    return "AsDateTime";
                if (primitiveTypeSymbol.ToDisplayString() == "System.TimeSpan")
                    return "AsInt64";
                if (primitiveTypeSymbol.TypeKind == TypeKind.Enum)
                    return "AsInt32";
                return "RawValue"; // Fallback, might not work for all types
        }
    }
}
