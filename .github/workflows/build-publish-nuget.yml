name: Build and Publish NuGet Package

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'demo/**'
      - 'Directory.Build.*'
      - 'Primify.sln'
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/build-publish-nuget.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'demo/**'
      - 'Directory.Build.*'
      - 'Primify.sln'
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/build-publish-nuget.yml'

env:
  PROJECT_NAME: 'Primify'
  SOLUTION_FILE: 'Primify.sln'
  MAIN_PROJECT_FILE: 'src/Primify/Primify.csproj'
  DEMO_PROJECT_FILE: 'demo/Primify.Demo/Primify.Demo.csproj'
  CONFIGURATION: 'Release'
  OUTPUT_DIR: './nuget_packages'
  LOCAL_FEED: './local-feed'

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Create SNK file from secret
        run: echo "${{ secrets.SNK_FILE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/Primify.snk

      - name: Install xmllint (for version extraction)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Extract Version
        id: extract_version
        run: |
          VERSION=$(xmllint --xpath 'string(/Project/PropertyGroup/Version)' ${{ env.MAIN_PROJECT_FILE }})
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Build and Pack Main Project
        run: |
          # Create output directory
          mkdir -p "${{ env.OUTPUT_DIR }}"
          
          # Build and pack the main project
          dotnet build "${{ env.MAIN_PROJECT_FILE }}" --configuration "${{ env.CONFIGURATION }}"
          dotnet pack "${{ env.MAIN_PROJECT_FILE }}" --configuration "${{ env.CONFIGURATION }}" -o "${{ env.OUTPUT_DIR }}" --no-build

      - name: Set up local NuGet feed
        run: |
          # Create local feed directory
          mkdir -p "${{ env.LOCAL_FEED }}"
          # Copy the package to local feed
          cp "${{ env.OUTPUT_DIR }}"/*.nupkg "${{ env.LOCAL_FEED }}"/
          # Add local feed to NuGet sources
          dotnet nuget add source "${{ github.workspace }}/${{ env.LOCAL_FEED }}" --name local-feed

      - name: Build Demo Project
        run: |
          # Restore and build the demo project
          dotnet restore "${{ env.DEMO_PROJECT_FILE }}" --source "${{ github.workspace }}/${{ env.LOCAL_FEED }}" --source https://api.nuget.org/v3/index.json
          dotnet build "${{ env.DEMO_PROJECT_FILE }}" --no-restore --configuration "${{ env.CONFIGURATION }}"

      - name: 'Find NuGet Package'
        id: find_nupkg
        run: |
          PACKAGE_FILE=$(find "${{ env.OUTPUT_DIR }}" -name "*.nupkg" | head -n 1)
          if [[ -z "$PACKAGE_FILE" ]]; then
            echo "ERROR: No .nupkg file found in ${{ env.OUTPUT_DIR }}"
            exit 1
          fi
          echo "package_path=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "âœ… Found package: $PACKAGE_FILE"

      - name: Push to GitHub Packages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          dotnet nuget push "${{ steps.find_nupkg.outputs.package_path }}" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --skip-duplicate

      - name: Check if tag exists
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_tag
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check_tag.outputs.tag_exists == 'false'
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
