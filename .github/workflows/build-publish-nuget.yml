name: Build and Publish NuGet Package

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'demo/**'
      - 'Directory.Build.*'
      - 'Primify.sln'
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/build-publish-nuget.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'demo/**'
      - 'Directory.Build.*'
      - 'Primify.sln'
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/build-publish-nuget.yml'

env:
  PROJECT_NAME: 'Primify'
  SOLUTION_FILE: 'Primify.sln'
  MAIN_PROJECT_FILE: 'src/Primify/Primify.csproj'
  DEMO_PROJECT_FILE: 'demo/Primify.Demo/Primify.Demo.csproj'
  CONFIGURATION: 'Release'
  OUTPUT_DIR: './nuget_packages'
  LOCAL_FEED: './local-feed'

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Create SNK file from secret
        run: echo "${{ secrets.SNK_FILE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/Primify.snk

      - name: Install xmllint (for version extraction)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Extract Version
        id: extract_version
        run: |
          VERSION=$(xmllint --xpath 'string(/Project/PropertyGroup/Version)' ${{ env.MAIN_PROJECT_FILE }})
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      # CORRECTED: Build the main project directly, not the whole solution.
      # This builds only the packable library and its direct dependencies.
      - name: Build Main Project for Packing
        run: dotnet build "${{ env.MAIN_PROJECT_FILE }}" --configuration "${{ env.CONFIGURATION }}"

      - name: Pack Main Project
        run: |
          mkdir -p "${{ env.OUTPUT_DIR }}"
          dotnet pack "${{ env.MAIN_PROJECT_FILE }}" --configuration "${{ env.CONFIGURATION }}" --no-build -o "${{ env.OUTPUT_DIR }}"

      - name: Setup Local Feed and Find Package
        id: setup_feed
        run: |
          mkdir -p "${{ env.LOCAL_FEED }}"
          PACKAGE_FILE=$(find "${{ env.OUTPUT_DIR }}" -name "*.nupkg" -print -quit)
          if [[ -z "$PACKAGE_FILE" ]]; then
            echo "ERROR: No .nupkg file found to test."
            exit 1
          fi
          # Move the package into the local feed. We need its new path for the push step.
          mv "$PACKAGE_FILE" "${{ env.LOCAL_FEED }}/"
          PACKAGE_NAME=$(basename "$PACKAGE_FILE")
          echo "package_path=${{ env.LOCAL_FEED }}/$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "✅ Package moved to local feed for testing."

      - name: Create nuget.config for Local Testing
        run: |
          cat <<EOF > nuget.config
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="local-test-feed" value="${{ github.workspace }}/${{ env.LOCAL_FEED }}" />
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
            </packageSources>
            <config>
              <add key="globalPackagesFolder" value=".nuget/packages" />
            </config>
          </configuration>
          EOF
          echo "✅ Created nuget.config to prioritize local package feed."
          cat nuget.config

      - name: Test Package with Demo Project
        run: |
          echo "--- Clearing NuGet cache to ensure a clean restore ---"
          dotnet nuget locals all --clear
          echo "--- Restoring and Building Demo Project ---"
          dotnet build "${{ env.DEMO_PROJECT_FILE }}" --configuration "${{ env.CONFIGURATION }}"
          echo "✅ Demo project built successfully, validating the new NuGet package."

      - name: Push to GitHub Packages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          dotnet nuget push "${{ steps.setup_feed.outputs.package_path }}" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --skip-duplicate

      - name: Check if tag exists
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_tag
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check_tag.outputs.tag_exists == 'false'
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
